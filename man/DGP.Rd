% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IL_SFA_Sim.R
\name{DGP}
\alias{DGP}
\title{The Data Generating Process used in the development of simulation studies.}
\usage{
DGP(n, m, param, model = "HN", seed.val = 0, nsim = 1000, zvar = FALSE)
}
\arguments{
\item{n}{the cross-sectional dimension}

\item{m}{the time dimension}

\item{param}{the vector of model parameters (the frontier regression parameters - beta, the idiosyncratic error variance - sigma_v, the vector of the parameters describing the efficiency behaviour - gamma)}

\item{model}{the kind of distribution considered to generate the efficiency related terms}

\item{seed.val}{the seed value used to make the simulations reproducible}

\item{nsim}{an integer indicating the number of simulated dataset}

\item{zvar}{a logical idenfying the case in which the efficiency is time variant}
}
\value{
a list including the simulated y vectors (a matrix of dimension nsim X n*m) and the defined: matrix of efficiency related terms (datu), matrix of independent variables, the vector of grouping identifiers and the variable influencing the efficiency level.
}
\description{
The DGP is defined as
\deqn{y_{it} = \alpha_i + x_{it}^T \beta - u_{it} + v_{it}}
where \deqn{u_it} can be Half-Normal or Exponential and in this last
case can also consider the mean of the Exponential distirbution as
\deqn{lambda_{it} = gamma_0 + gamma_1 z_{it}}.
This last definition also brings to time-constant cases when
\deqn{z_{it}} is considered constant over time.
}
\examples{
### Setting di Table 1, (a) lambda = 1 Belotti TFE - N=100, T=5
### The example is limited to 100 replications to make the code
### fairly executable but changing the nsim parameter one can consider the
### original simulation with 1000 replications.

N <- 100
T <- 5
para <- c(1,-1.5,1,0.25)
nsimul <- 100
dat <- DGP(N, T, list(beta=para[1], sigmav=para[4], gamma=para[2:3]), model = "Exp",
           seed.val = 22, nsim = nsimul)
res100 <- matrix(0, nrow = nsimul, ncol=4)
for(i in 1:nrow(res100)){
  print(i)
  mydat <- list(y = dat$daty[i,], x = data.frame(dat$x), g = dat$g, z = dat$datz)
  mle <- il_sfa(X = mydat$x, y = mydat$y, distr = "Exp", het = TRUE, z = mydat$z,
                group = mydat$g, useHess = TRUE)
  res100[i,] <- mle$par
  }
  # Compute the MSE of the estimates
  for(i in 1:4) print(MSE(res100[,i], para[i]))
  # Compare them with the estimated values included in the
  # package data (res_N100_Stata.rda)
  data(res_N100_Stata)
  for(i in 1:4) print(MSE(res_N100_Stata[1:nsimul,i], para[i]))

}
